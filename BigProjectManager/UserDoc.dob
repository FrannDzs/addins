VERSION 5.00
Object = "{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.0#0"; "mscomctl.ocx"
Begin VB.UserDocument UserDoc 
   ClientHeight    =   6585
   ClientLeft      =   0
   ClientTop       =   0
   ClientWidth     =   5205
   HScrollSmallChange=   225
   ScaleHeight     =   6585
   ScaleWidth      =   5205
   VScrollSmallChange=   225
   Begin MSComctlLib.ImageList img1 
      Left            =   4080
      Top             =   120
      _ExtentX        =   1005
      _ExtentY        =   1005
      BackColor       =   -2147483643
      ImageWidth      =   16
      ImageHeight     =   16
      MaskColor       =   12632256
      _Version        =   393216
      BeginProperty Images {2C247F25-8591-11D1-B16A-00C0F0283628} 
         NumListImages   =   15
         BeginProperty ListImage1 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":0000
            Key             =   "folder"
         EndProperty
         BeginProperty ListImage2 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":059A
            Key             =   "quest"
         EndProperty
         BeginProperty ListImage3 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":08EE
            Key             =   "frm"
         EndProperty
         BeginProperty ListImage4 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":0C40
            Key             =   ""
         EndProperty
         BeginProperty ListImage5 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":14B2
            Key             =   "unk"
         EndProperty
         BeginProperty ListImage6 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":1804
            Key             =   "mdi"
         EndProperty
         BeginProperty ListImage7 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":1B58
            Key             =   "bas"
         EndProperty
         BeginProperty ListImage8 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":20F2
            Key             =   "cls"
         EndProperty
         BeginProperty ListImage9 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":268C
            Key             =   "pag"
         EndProperty
         BeginProperty ListImage10 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":2C26
            Key             =   "ctl"
         EndProperty
         BeginProperty ListImage11 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":31C0
            Key             =   "txt"
         EndProperty
         BeginProperty ListImage12 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":331A
            Key             =   "func"
         EndProperty
         BeginProperty ListImage13 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":366C
            Key             =   "dob"
         EndProperty
         BeginProperty ListImage14 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":3C06
            Key             =   "dsr"
         EndProperty
         BeginProperty ListImage15 {2C247F27-8591-11D1-B16A-00C0F0283628} 
            Picture         =   "UserDoc.dox":41A0
            Key             =   "proj"
         EndProperty
      EndProperty
   End
   Begin MSComctlLib.TreeView tv 
      Height          =   6135
      Left            =   0
      TabIndex        =   0
      Top             =   0
      Width           =   3855
      _ExtentX        =   6800
      _ExtentY        =   10821
      _Version        =   393217
      HideSelection   =   0   'False
      Indentation     =   529
      LabelEdit       =   1
      Style           =   7
      ImageList       =   "img1"
      Appearance      =   1
      OLEDragMode     =   1
      OLEDropMode     =   1
   End
   Begin VB.Menu mnuPopup 
      Caption         =   "mnuPopup"
      Begin VB.Menu mnuViewSource 
         Caption         =   "Source"
      End
      Begin VB.Menu mnuViewDesigner 
         Caption         =   "Designer"
      End
      Begin VB.Menu mnuSpacer2 
         Caption         =   "-"
      End
      Begin VB.Menu mnuFind 
         Caption         =   "Find"
      End
      Begin VB.Menu mnuAdd 
         Caption         =   "Add"
         Begin VB.Menu mnuAddGroup 
            Caption         =   "Group"
         End
         Begin VB.Menu mnuAddFolder 
            Caption         =   "Folder"
         End
         Begin VB.Menu mnuAddFile 
            Caption         =   "Files"
         End
      End
      Begin VB.Menu mnuMove 
         Caption         =   "Move"
         Begin VB.Menu mnuMoveUp 
            Caption         =   "Up"
         End
         Begin VB.Menu mnuMoveDown 
            Caption         =   "Down"
         End
         Begin VB.Menu mnuSpacer3 
            Caption         =   "-"
         End
         Begin VB.Menu mnuMoveTop 
            Caption         =   "Top"
         End
         Begin VB.Menu mnuMoveBottom 
            Caption         =   "Bottom"
         End
      End
      Begin VB.Menu mnuRemoveItem 
         Caption         =   "Remove Item"
      End
      Begin VB.Menu mnuSpacer 
         Caption         =   "-"
      End
      Begin VB.Menu mnuExtra 
         Caption         =   "Extra"
         Begin VB.Menu mnuRebuild 
            Caption         =   "Rebuild Fresh"
         End
         Begin VB.Menu mnuRemoveUnknown 
            Caption         =   "Remove Missing"
         End
         Begin VB.Menu mnuScanForChanges 
            Caption         =   "Scan For Changes"
         End
      End
   End
End
Attribute VB_Name = "UserDoc"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

Private WithEvents SaveTree As CSaveTree
Attribute SaveTree.VB_VarHelpID = -1

'template for dragging nodes around: https://www.developerfusion.com/article/77/treeview-control/8/

Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
Private selNode As Node
Dim projPath As String

Private Sub mnuRebuild_Click()
    If MsgBox("Are you sure you want to revert to default structure?", vbYesNo) = vbNo Then Exit Sub
    buildFreshMirror
End Sub

Private Sub mnuRemoveUnknown_Click()
    On Error Resume Next
    Dim n As Node, i As Long
    For i = tv.Nodes.Count To 1 Step -1
        If tv.Nodes(i).Image = "quest" Then tv.Nodes.Remove i
    Next
End Sub

Private Sub mnuScanForChanges_Click()
    ScanForChanges
End Sub

Private Sub mnuViewDesigner_Click()
    On Error Resume Next
    If selNode Is Nothing Then Exit Sub
    If selNode.Image = "folder" Or selNode.Image = "proj" Then Exit Sub
    handleCmd "designer:" & selNode.Text
End Sub

Private Sub mnuViewSource_Click()
    On Error Resume Next
    Dim c As CVBComponent
    If selNode Is Nothing Then Exit Sub
    If selNode.Image = "folder" Or selNode.Image = "proj" Then Exit Sub
    
    If selNode.Image = "txt" Then 'related document
        Set c = selNode.tag
        handleCmd "showrelated:" & c.path
    Else
        handleCmd "show:" & selNode.Text
    End If
    
End Sub

Private Sub UserDocument_Initialize()
     mnuPopup.Visible = False
     Set SaveTree = New CSaveTree
     tv.Move 0, 0
     UserDocument_Resize
End Sub

Private Sub UserDocument_Resize()
    On Error Resume Next
    tv.Width = UserDocument.ScaleWidth
    tv.Height = UserDocument.ScaleHeight
End Sub

Sub SaveTreeToFile()
    Dim cfg As String
    projPath = mainProjPath
    If Not fso.FileExists(projPath) Then Exit Sub 'not connected?
    cfg = fso.GetParentFolder(projPath) & "\tree.cfg"
    SaveTree.SaveTree tv, cfg
End Sub
 

Private Sub saveTree_DeSerialize(n As MSComctlLib.Node, ByVal appendTag As String, ByVal index As Long)
    'On Error Resume Next
    Dim c As New CVBComponent
    
    If InStr(appendTag, "- expanded") > 0 Then
        n.Expanded = True
        appendTag = Replace(appendTag, "- expanded", Empty)
    End If
        
    If InStr(appendTag, "|") = 0 Then
        n.key = n.Text
        n.Image = appendTag
    Else
        c.loadFromList appendTag
        n.key = c.name
        n.Image = c.icon
        Set c.n = n
        Set n.tag = c
    End If
    
End Sub

Private Sub saveTree_Serialize(n As MSComctlLib.Node, appendTag As String, ByVal index As Long)
    On Error Resume Next
    Dim c As CVBComponent
    
    If n.tag Is Nothing Then 'its a folder entry just save icon
        appendTag = n.Image
    Else
        Set c = n.tag
        appendTag = c.raw
    End If
    
    If n.Expanded Then appendTag = appendTag & "- expanded" 'since we can even nest stuff under code modules
    
End Sub

 
Sub cmdStartup_Click()
    
    Dim cfg As String
    
    projPath = mainProjPath
    If Not fso.FileExists(projPath) Then Exit Sub 'not connected?
    
    cfg = fso.GetParentFolder(projPath) & "\tree.cfg"
    
    'easy we just build new nothing saved...
    If Not fso.FileExists(cfg) Then
        buildFreshMirror
        Exit Sub
    End If
    
    If SaveTree Is Nothing Then Set SaveTree = New CSaveTree
    SaveTree.RestoreTree tv, cfg
    ScanForChanges
    
End Sub

Private Sub mnuMoveBottom_Click()
    'On Error Resume Next
    If selNode Is Nothing Then Exit Sub
    Dim n As Node, p As Node, c As Collection, i As Long
    Set p = selNode.Parent
    
    If Children(p, c) > 1 Then
        For i = c.Count To 1 Step -1
            Set n = c(i)
            If n <> selNode Then
                Set n.Parent = p
            End If
        Next
    End If
    
End Sub

Private Sub mnuMoveDown_Click()

    If selNode Is Nothing Then Exit Sub
    Dim n As Node, p As Node, c As Collection, targetAt As Long, i As Long
    
    Set p = selNode.Parent
    
    If Children(p, c) > 1 Then
    
        For i = 1 To c.Count
            Set n = c(i)
            If ObjPtr(n) = ObjPtr(selNode) Then
                targetAt = i
                Exit For
            End If
        Next
        
        If targetAt <> 0 And targetAt <> c.Count Then
            Set selNode.Parent = p
            For i = targetAt + 1 To 1 Step -1
                If i <> targetAt Then
                    Set n = c(i)
                    Set n.Parent = p
                    Debug.Print "moving " & n.Text
                End If
            Next
        End If
        
    End If
    
End Sub

Private Sub mnuMoveTop_Click()
    'On Error Resume Next
    If selNode Is Nothing Then Exit Sub
    Dim p As Node
    Set p = selNode.Parent
    If Not p Is Nothing Then Set selNode.Parent = p
End Sub

'two nodes same parent, allow drag drop reposition of order..(note no more nesting under source nodes only folders)
Sub RepositionNodeBelow(n As Node, target As Node)

    Dim nn As Node, p As Node, c As Collection, targetAt As Long, i As Long
    
    If n.Parent <> target.Parent Then Exit Sub
    
    Set p = n.Parent
    
    If Children(p, c) > 1 Then
    
        For i = 1 To c.Count
            Set nn = c(i)
            If ObjPtr(nn) = ObjPtr(target) Then
                targetAt = i
                Exit For
            End If
        Next
        
        If targetAt = c.Count Then
            Set selNode = n
            mnuMoveBottom_Click
            Exit Sub
        End If
        
        'Debug.Print "targetAt: " & targetAt
        
        If targetAt > 1 Then
            Set n.Parent = p
            For i = targetAt To 1 Step -1
                Set nn = c(i)
                If ObjPtr(nn) <> ObjPtr(n) Then
                    Set nn.Parent = p
                    'Debug.Print "moving " & nn.Text
                End If
            Next
        End If
        
    End If

End Sub

Private Sub mnuMoveUp_Click()

    If selNode Is Nothing Then Exit Sub
    Dim n As Node, p As Node, c As Collection, targetAt As Long, nn As Node, i As Long

    Set p = selNode.Parent
    
    If Children(p, c) > 1 Then
    
        For i = 1 To c.Count
            Set n = c(i)
            If ObjPtr(n) = ObjPtr(selNode) Then
                targetAt = i
                Exit For
            End If
        Next
        
        If targetAt > 1 Then 'not 0 not 1
            Set selNode.Parent = p
            For i = targetAt - 2 To 1 Step -1
                If i <> targetAt Then
                    Set n = c(i)
                    Set n.Parent = p
                End If
            Next
        End If
        
    End If
    
End Sub

Sub ScanForChanges()

    Dim cfg As String, vbc As CVBComponent, x, xx() As String, n As Node, nn As Node, foundNode As Node
    Dim freshElements As New Collection
    
    'todo: should we break out the diffing into its own function for a "Scan for changes" menu item?
    'they can always load and unload the plug with addin manager..
    'now we need to diff and see if were missing anything (added or lost)
    x = handleCmd("list")
    If Len(x) = 0 Then Exit Sub
    
    xx = Split(x, vbCrLf)
    For Each x In xx
    
        Set vbc = New CVBComponent
        vbc.loadFromList x
        freshElements.Add vbc, vbc.name
        'Debug.Print vbc.name
        
        If NodeExists(tv, vbc.name, foundNode) Then
            'great this didnt change
        Else
        
            Debug.Print vbc.name & " - a new entry has been added in the IDE we dont know about"
            
            If Not NodeExists(tv, vbc.defFolder, n) Then 'use default folder name since we dont know where to place it
                Set n = tv.Nodes.Add(tv.Nodes(1), tvwChild, vbc.defFolder, vbc.defFolder, "folder")
            End If

            Set nn = tv.Nodes.Add(n, tvwChild, vbc.name, vbc.name, vbc.icon)
            Set nn.tag = vbc
            Set vbc.n = nn
            
            n.Expanded = True
        End If
    Next
    
    'now we need to look for nodes we had in our tree, but which are no longer in the IDE
    For Each n In tv.Nodes
        If n.Image <> "folder" And n.Image <> "proj" Then
            'Debug.Print n.key
            If Not keyExistsInCollection(n.Text, freshElements) Then
                n.Image = "quest"
            End If
        End If
    Next

End Sub

Private Sub buildFreshMirror()
    
    On Error Resume Next
    
    Dim x, xx() As String, p As Node, n As Node, nn As Node
    Dim vbc As CVBComponent
    
    projPath = mainProjPath
    
    tv.Nodes.Clear

    Set p = tv.Nodes.Add(, , projPath, fso.FileNameFromPath(projPath), "proj")
    p.Expanded = True
    
    x = handleCmd("list")
    If Len(x) = 0 Then Exit Sub
    
    xx = Split(x, vbCrLf)
    For Each x In xx
        Set vbc = New CVBComponent
        vbc.loadFromList x
        
        If NodeExists(tv, vbc.name) Then 'this shouldnt happen..its from the ide and clean build
            Debug.Print "Node exists name: " & vbc.name
        Else
            If Not NodeExists(tv, vbc.defFolder, n) Then
                Set n = tv.Nodes.Add(tv.Nodes(1), tvwChild, vbc.defFolder, vbc.defFolder, "folder")
            End If

            Set nn = tv.Nodes.Add(n, tvwChild, vbc.name, vbc.name, vbc.icon)
            Set nn.tag = vbc
            Set vbc.n = nn
            
            n.Expanded = True
        End If
    Next
    
End Sub

 

Sub ipc_Message(m As String)
    
    Dim ce As CComponentEvent
    Dim c As CVBComponent
    
    If InStr(1, m, "AddinInstance_OnStartupComplete", vbTextCompare) > 0 Then
        'load from tree if saved version found, else load fresh..
        cmdStartup_Click
    End If
    
    If Left(m, 10) = "Component|" Then
        Set ce = LoadComponentEvent(m)
        Set c = HandleComponentEvent(tv, ce) 'this will handle renames in tree, and add new components
    End If

End Sub

Private Function LoadComponentEvent(raw As String) As CComponentEvent
    Dim e As New CComponentEvent
    e.init raw
    Set LoadComponentEvent = e
End Function

Private Sub mnuAddFolder_Click()
        
        On Error Resume Next
        Dim f As String, p As Node, fn As String
        
        If tv.Nodes.Count = 0 Then Exit Sub
        If selNode Is Nothing Then selNode = tv.Nodes(1)
        
        f = dlg.FolderDialog()
        If Len(f) = 0 Then Exit Sub
        
        fn = fso.FolderName(f)
        Set p = tv.Nodes.Add(selNode, tvwChild, f, fn, "folder")
        AddFolderToTree f, p
            
End Sub

Private Sub mnuAddFile_Click()

        On Error Resume Next
        Dim x, p As Node, fn As String, c As Collection
        
        If tv.Nodes.Count = 0 Then Exit Sub
        If selNode Is Nothing Then selNode = tv.Nodes(1)
        
        Set c = dlg.OpenMulti()
        If c.Count = 0 Then Exit Sub

        For Each x In c
            AddNodeFromFile selNode, x
        Next
        
End Sub

Function AddFolderToTree(ByVal folder As String, p As Node, Optional recursive As Boolean = True)
    
        Dim ff() As String, x, bn As String, pp As Node
        
        If Not fso.FolderExists(folder) Then Exit Function
        
        'fn = fso.FolderName(f)
        ff = fso.GetFolderFiles(folder)
        p.Expanded = True
        
        For Each x In ff
            AddNodeFromFile p, x
        Next
        
        If recursive Then
            ff = fso.GetSubFolders(folder)
            If Not AryIsEmpty(ff) Then
                For Each x In ff
                    bn = fso.FolderName(CStr(x))
                    Set pp = tv.Nodes.Add(p, tvwChild, x, bn, "folder")
                    pp.Expanded = True
                    AddFolderToTree x, pp
                Next
            End If
        End If
        
        
End Function
    
Private Sub mnuAddGroup_Click()
    On Error Resume Next
    Dim nn As String, f As String
    
    If selNode Is Nothing Then Set selNode = tv.Nodes(1)
    
    'note if a source node is a parent, double clicking on it will collapse it..which is a bug..
    'If nodTarget.Image <> "folder" And nodTarget.Image <> "proj" Then
    '    Set nodTarget = nodTarget.Parent
    'End If
    
    nn = selNode.Text
    
    f = InputBox("Enter name of new folder to add under " & nn)
    If Len(f) = 0 Then Exit Sub
    
    tv.Nodes.Add selNode, tvwChild, f, f, "folder"
    If Err.Number <> 0 Then
        MsgBox Err.Description
    End If
End Sub

Private Sub mnuFind_Click()
    frmFind.init tv, img1
End Sub

Private Sub mnuRemoveItem_Click()

    Dim n As Node
    Dim c As New Collection
    Dim i As Long
    
    On Error Resume Next
    
    If selNode Is Nothing Then Exit Sub

    'MsgBox selNode.Image
   
    AllNodesUnder tv, selNode, c
    
    If c.Count > 1 Then
        If MsgBox("Are you sure you want to delete " & c.Count & " nodes?", vbYesNo) = vbNo Then Exit Sub
        For i = c.Count To 1 Step -1
            Set n = c(i)
            If n.Image = "folder" Then
                tv.Nodes.Remove n.key
            Else
                handleCmd "remove:" & n.Text 'the components Remove event will remove the actual node from our tree
            End If
        Next
        Exit Sub
    End If

    If selNode.Image = "proj" Then
        DoEvents 'dont delete top level node...
    ElseIf selNode.Image = "folder" Then
        tv.Nodes.Remove selNode.key
    Else
        handleCmd "remove:" & selNode.Text
    End If
    Set selNode = Nothing
    
End Sub

Private Sub tv_DblClick()
    On Error Resume Next
    
    If selNode Is Nothing Then Exit Sub
    If selNode.Image = "folder" Or selNode.Image = "proj" Then Exit Sub
    
    Dim c As CVBComponent
    Set c = selNode.tag
    If Not c Is Nothing Then
        If c.Typ = &HA Then
            handleCmd "showrelated:" & c.path
            Exit Sub
        End If
    End If
    
    handleCmd "show:" & selNode.Text
 
    If selNode.Children > 0 Then selNode.Expanded = True 'source node with kids (bug work around)
    
End Sub

Private Sub tv_MouseDown(Button As Integer, shift As Integer, x As Single, Y As Single)
    Dim nodNode As Node
    Set nodNode = tv.HitTest(x, Y)
    If nodNode Is Nothing Then Exit Sub
    nodNode.selected = True
End Sub

Private Sub tv_MouseUp(Button As Integer, shift As Integer, x As Single, Y As Single)
    On Error Resume Next
    Dim c As CVBComponent, hasSource As Boolean
    If Button = 2 Then
        If Not selNode Is Nothing Then
            hasSource = Not (selNode.Image = "folder" Or selNode.Image = "proj")
            mnuViewSource.Visible = hasSource
            mnuViewDesigner.Visible = hasSource
            mnuMove.Visible = Not hasSource 'for source nodes we can use drag drop to easily position and order now..less clutter
            mnuSpacer2.Visible = hasSource
            If hasSource Then
                Set c = selNode.tag
                mnuViewDesigner.Visible = typeHasDesigner(c.Typ)
            End If
            mnuExtra.Visible = (selNode.Image = "proj")
            mnuSpacer.Visible = mnuExtra.Visible
            If mnuExtra.Visible Then mnuMove.Visible = False
        End If
        PopupMenu mnuPopup
    End If
End Sub

Private Sub tv_NodeClick(ByVal Node As MSComctlLib.Node)
    Set selNode = Node
End Sub

'occurs when the user starts dragging this is where you assign the effect and the data.
Private Sub tv_OLEStartDrag(Data As MSComctlLib.DataObject, AllowedEffects As Long)
    AllowedEffects = vbDropEffectMove 'Set the effect to move
    Data.SetData tv.SelectedItem.key  'Assign the selected item's key to the DataObject
    blnDragging = True                'dragging from this control internally
End Sub



'Text = 1 (vbCFText)
'Bitmap = 2 (vbCFBitmap)
'Metafile = 3
'Emetafile = 14
'DIB = 8
'Palette = 9
'Files = 15 (vbCFFiles)
'RTF = -16639

'// occurs when the object is dragged over the control. this is where you check to see if the mouse is over a valid drop object
Private Sub tv_OLEDragOver(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, shift As Integer, x As Single, Y As Single, state As Integer)
    Dim nodNode As Node

    Effect = vbDropEffectMove
    Set nodNode = tv.HitTest(x, Y)
    
    If nodNode Is Nothing Or blnDragging = False Then
        If Not Data.GetFormat(vbCFFiles) Then 'we also accept files from the desktop
            Effect = vbDropEffectNone 'setting this will block the transfer further..
        End If
    End If
    
End Sub

Function AddNodeFromFile(p As Node, ByVal fpath As String) As Boolean
    
    Dim vbc As New CVBComponent
    Dim n As Node
    
    If Not vbc.loadFromFile(fpath) Then
        Debug.Print "AddNodeFromFile failed: " & fpath
        Exit Function
    End If
    
    If NodeExists(tv, vbc.name) Then
        Debug.Print vbc.name & " already exists in tree: " & fpath
        Exit Function
    End If
    
    Set n = tv.Nodes.Add(p, tvwChild, vbc.name, vbc.name, vbc.icon)
    Set vbc.n = n
    Set n.tag = vbc
    
    'this will trigger an IPC Component|Added message, but our node will already exist so it will be ignored with warning
    handleCmd "addfile:" & fpath
    
    AddNodeFromFile = True
            
End Function

'// occurs when the user drops the object this is where you move the node and its children. this will not occur if Effect = vbDropEffectNone
Private Sub tv_OLEDragDrop(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, shift As Integer, x As Single, Y As Single)
    
    On Error Resume Next
    
    Dim strSourceKey As String
    Dim nodTarget As Node
    Dim f As String, fn As String, p As Node, icon As String
    Dim cn As String, vbc As CVBComponent, z
    Dim positionNode As Node
    
    If tv.Nodes.Count = 0 Then Exit Sub
    Set nodTarget = tv.HitTest(x, Y)
    If nodTarget Is Nothing Then Set nodTarget = tv.Nodes(1)
    
    If nodTarget.Image <> "folder" And nodTarget.Image <> "proj" Then
        Set positionNode = nodTarget
        Set nodTarget = nodTarget.Parent
    End If
    
    If Data.GetFormat(vbCFText) Then
        
        'internal drag to rearrange nodes
        strSourceKey = Data.GetData(vbCFText)
        Set tv.Nodes(strSourceKey).Parent = nodTarget
        
        If Not positionNode Is Nothing Then
            RepositionNodeBelow tv.SelectedItem, positionNode
        End If
        
    ElseIf Data.GetFormat(vbCFFiles) Then
        
        For Each z In Data.files
            
            f = z
            
            If fso.FolderExists(f) Then
                fn = fso.FolderName(f)
                Set p = tv.Nodes.Add(nodTarget, tvwChild, f, fn, "folder")
                AddFolderToTree f, p
            Else
                AddNodeFromFile nodTarget, f
            End If
            
        Next
        
    End If
    
    blnDragging = False
    Effect = 0 '// cancel effect so that VB doesn't muck up your transfer
    
End Sub



